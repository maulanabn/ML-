# -*- coding: utf-8 -*-
"""Machine Learning Capstone

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17vTz-GI1xJej3HQjRlOFu5cy3tawVkSW

# Import Library
"""

from zipfile import ZipFile
import numpy as np 
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from pathlib import Path
from keras import layers
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
import seaborn  as sns

"""# Import kaggle"""

pip install -q kaggle

import os
os.environ['KAGGLE_USERNAME'] = "alpiansyahrizqi"
os.environ['KAGGLE_KEY'] = "4ec2871806d4a125d51415bdc1e5a75a"

!kaggle datasets download -d fedesoriano/body-fat-prediction-dataset

!unzip -q body-fat-prediction-dataset.zip -d .

"""# Import dataset"""

df = pd.read_csv('/content/bodyfat.csv')

df

"""#  Exploratory Data Analysis"""

df.isnull().sum()

df.info()

df['Weight'] = df['Weight'] * 0.45  #1 lbs = 0.45 kg
df['Height'] = df['Height'] * 2.54  #1 inch = 2.54 cm

h_squared = (df['Height'] / 100) ** 2

df['BMI'] = df['Weight'] / h_squared #creating bmi

df.describe()

plt.figure(figsize=(18,15))
sns.heatmap(df.corr(),annot=True)
plt.title('Heatmap of Variable Correlations')
plt.show()

plt.figure(figsize=(15,5))
sns.lineplot(x='Abdomen',y='BodyFat',data=df)
plt.title('Body Fat vs Abdomen size')
plt.xlabel('Abdomen size')
plt.ylabel('Body Fat')
plt.show()

plt.figure(figsize=(15,5))
sns.lineplot(x='Chest',y='BodyFat',data=df)
plt.title('Body Fat vs Chest size')
plt.xlabel('Chest size')
plt.ylabel('Body Fat')
plt.show()

plt.figure(figsize=(5,5))
sns.distplot(df['BodyFat'])
plt.title('Distribution of Body Fat')
plt.xlabel('Body Fat')
plt.show()

df['BodyFat'].describe()

sns.scatterplot(x=df['Weight'],y=df['BodyFat'])

df['Weight'].describe()

# df = df[df.Weight != 163.417500 ]

df.hist(figsize=(16,12))

df.columns

sns.pairplot(df,x_vars=['Density','Age','Weight','Height','Neck'],y_vars=['BodyFat'])

sns.pairplot(df,x_vars=['Chest','Abdomen','Hip','Thigh','Knee'],y_vars=['BodyFat'])

sns.pairplot(df,x_vars=['Ankle','Biceps','Forearm','Wrist','BMI'],y_vars=['BodyFat'])

sns.scatterplot(x=df['BMI'],y=df['BodyFat'])

len(df.columns)

px = 1
plt.figure(figsize=(20,20))
for i in ['Density', 'BodyFat', 'Age', 'Weight', 'Height', 'Neck', 'Chest',
       'Abdomen', 'Hip', 'Thigh', 'Knee', 'Ankle', 'Biceps', 'Forearm',
       'Wrist', 'BMI']:
    if px<17:
        plt.subplot(6,5,px)
        plt.boxplot(df[i])
        plt.title(i)
        px=px+1

def outlier():
    l = ['Density', 'BodyFat', 'Age', 'Weight', 'Height', 'Neck', 'Chest',
       'Abdomen', 'Hip', 'Thigh', 'Knee', 'Ankle', 'Biceps', 'Forearm',
       'Wrist', 'BMI']
    for i in l:
        x = np.quantile(df[i],[0.25,0.75])
        iqr = x[1]-x[0]   
        lof = x[0]-1.5*iqr   
        upf = x[1]+1.5*iqr   
        df[i] = np.where(df[i]>upf,upf,(np.where(df[i]<lof,lof,df[i])))
outlier()

px = 1
plt.figure(figsize=(20,20))
for i in ['Density', 'BodyFat', 'Age', 'Weight', 'Height', 'Neck', 'Chest',
       'Abdomen', 'Hip', 'Thigh', 'Knee', 'Ankle', 'Biceps', 'Forearm',
       'Wrist', 'BMI']:
    if px<17:
        plt.subplot(6,5,px)
        plt.boxplot(df[i])
        plt.title(i)
        px=px+1

df.describe()

"""# Data preperation"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = df.drop('BodyFat',axis=1)
y = df['BodyFat']
X_train, X_test, y_train, y_test = train_test_split(X,y,train_size=0.7,random_state=100)

scaler = StandardScaler()
col = X_train.columns
X_train = scaler.fit_transform(X_train[col])
X_train = pd.DataFrame(X_train,columns=col)
X_train.head()

X_test = scaler.transform(X_test)
X_test = pd.DataFrame(X_test,columns=col)
X_test.head()

"""# Modeling"""

from sklearn.linear_model import LinearRegression , ElasticNet , Lasso , Ridge
from sklearn.metrics import r2_score,accuracy_score
from sklearn.svm import SVR
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.linear_model import SGDRegressor
from sklearn.linear_model import BayesianRidge
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from lightgbm import LGBMRegressor
from sklearn.kernel_ridge import KernelRidge
from sklearn.tree import DecisionTreeRegressor

kernel = KernelRidge()
lgbm = LGBMRegressor()
random = RandomForestRegressor()
linear = LinearRegression()
elastic = ElasticNet()
lasso  = Lasso()
ridge = Ridge()
svr=SVR()
grad = GradientBoostingRegressor()
sgd = SGDRegressor()
bay = BayesianRidge()
dtr = DecisionTreeRegressor()
clf = [linear,elastic,lasso,ridge,svr,grad,sgd,bay,random,kernel,lgbm,dtr]
hashmap={}

def compute(model):
    model.fit(X_train,y_train)
    y_pred = model.predict(X_test)
    r2=r2_score(y_test,y_pred)
    rmse=np.sqrt(mean_squared_error(y_test,y_pred))
    hashmap[str(model)]=(r2,rmse)

for i in clf:
    compute(i)

score=pd.DataFrame(hashmap)
score = score.transpose()
score.columns=['R2_score','RMSE']
score = score.sort_values('R2_score',ascending=False)

score

